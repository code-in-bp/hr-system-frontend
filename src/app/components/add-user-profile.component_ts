import { Component, OnInit, ViewChild } from "@angular/core";
import { Router } from "@angular/router";
import { UserService } from "../services/user.service";
import { v4 as uuid } from "uuid";
import { FormBuilder, FormControl, FormGroup, Validators } from "@angular/forms";
import { ObjectUnsubscribedError } from "rxjs";
import { UserApiService } from "../services/hire.service";

@Component({
  selector: "app-add-user-profile",
  template: `
     <div class="container-flex">
      <div class="row ds-banner-row">
        <div class="col-md-6">
          <h4>Add New User Profile</h4>
        </div>

        <div class="col-md-6">
          <div class="row">
            <div class="col-md-12"></div>
          </div>
        </div>
      </div>
    </div>
    <div class="container-fluid ds-form-container">
      <div class="row">
        <div class="col-md-12">
          <p class="ds-custom-p">User Profile Form</p>
        </div>
      </div>

    <!-- <form #f="ngForm" novalidate (ngSubmit)="f.form.valid && onSubmit()"> -->
      <form [formGroup]="exform">
      <div class="container">
        <div class="row">
          <div class="col-md-12">
          
            <div class="form-group">
              <label>First Name</label>
              <input
                formControlName="firstName"
                type="text"
                class="form-control"
                value=""
              />
              <small class="text-danger" *ngIf="exform.get('firstName').invalid && exform.get('firstName').touched">* Firstname field is required</small>
            </div>

            <div class="form-group">
            <label>Last Name</label>
              <input
              formControlName="lastName"
                type="text"
                class="form-control"
                value=""
              />
              <small class="text-danger" *ngIf="exform.get('lastName').invalid && exform.get('lastName').touched">* Lastname field is required</small>

            </div>

            <div class="form-group">
            <label>Email</label>

              <input
                formControlName="email"
                type="email"
                class="form-control"
                required
                name="email"
                value=""
              />
              <small class="text-danger" *ngIf="f.email.invalid && f.email.touched">* email field is required</small>
              
            </div>

            <div class="form-group">
            <label>Phone</label>

              <input
              formControlName="phone"
                type="text"
                class="form-control"
                required
                name="phone"
                placeholder="e.g. 0036 99 999 9999"
                value=""
              />
              <small class="text-danger" *ngIf="exform.get('phone').invalid && exform.get('phone').touched">* Phone field is required</small>
            </div>

            <div class="form-group">
            <label>About</label>

              <textarea
              formControlName="about"
                class="form-control"
                name="about"
                required
                ng-model="aboutTextArea"
              ></textarea>
              <small class="text-danger" *ngIf="f.about.invalid && f.about.touched">* About field is required</small>
            </div>

              <div class="form-group">
              <label>Birthday</label>

                <div class="input-group">

                  <input
                  formControlName="birthday"
                    class="form-control"
                    placeholder="YYYY-MM-DD"
                    
                  />

                  <div class="input-group-append">
                    <!-- <button
                      class="btn btn-outline-secondary calendar"
                      (click)="d.toggle()"
                      type="button"
                    ></button> -->
                  </div>
                </div>
                <small class="text-danger" *ngIf="f.birthday.invalid && f.birthday.touched">* Birthday field is required</small>


              </div>

            <div class="form-group">
            <label>Avatar</label>

              <select
              formControlName="avatar"
                class="form-control"
                name="avatar"
                required
              >
                <!-- [(ngModel)]="languages"
                    multiple-->
                <option class="hidden" value="" disabled selected>
                  Select Avatar
                </option>
                <option
                  value="assets/user-solid.svg"
                  style="background-image:url(assets/user-solid.svg);"
                >
                  avatar 1
                </option>
                <option
                  value="assets/user-circle-solid.svg"
                  style="background-image:url(assets/user-circle-solid.svg);"
                >
                  avatar 2
                </option>
                <option
                  value="assets/user-tie-solid.svg"
                  style="background-image:url(assets/user-tie-solid.svg);"
                >
                  avatar 3
                </option>
              </select>
              <small class="text-danger" *ngIf="f.avatar.invalid && f.avatar.touched">* Avatar field is required</small>

            </div>
            
          </div>
        </div>
      </div>

      <div class="container">
        <div class="row ">
          <div class="col-md-6 col-md-sm">
            <button class="ds-cancel-button btn" routerLink="/">Cancel</button>
          </div>

          <div class="col-md-6 col-md-sm">
            <div class="row">
              <div class="col-md-12 col-sm-12">
                <button [disabled]="exform.invalid"  class="btn btn-primary " style="width: 100%; border:none; border-radius: 0px;" (click)="saveUserLocal()" >Save</button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </form>
    </div>
    
  `,
})
export class AddUserProfileComponent implements OnInit {
  id: any;
  usrs: any;
  exform: FormGroup;


  constructor(private userService: UserService, private router: Router, private fb: FormBuilder, private userApiService: UserApiService) {  }


  ngOnInit(): void {
    const id = uuid();
    this.usrs = this.userService.getUsers();


    this.exform = this.fb.group({
      id: id,
      firstName: new FormControl(null, Validators.required),
      lastName: new FormControl(null, Validators.required),
      email: new FormControl(null, [Validators.required, Validators.email]),
      phone: new FormControl(null, [Validators.required, Validators.pattern("^((\\+91-?)|0)?[0-9]{13}$")]),
      birthday: new FormControl(null, Validators.required),
      about: new FormControl(null, [Validators.required, Validators.minLength(5)]),
      avatar: new FormControl(null, Validators.required)
    });
  }

  get f() {
    return this.exform.controls;
  }


  saveUserLocal(): void {
    if (this.exform.invalid) {
      return;
    }

    this.userService.addUser(this.exform.value)
    this.router.navigate(["/users/", this.exform.value.id]);
  }




  // interact with real api TODO: create seperate component for it
  saveUserApi(): void {
    if (this.exform.invalid) {
      return;
    }
    
    this.userApiService.createUser(this.exform.value)
      .subscribe(
        response => {
          console.log(response);
        },
        error => {
          console.log(error);
        });
        this.router.navigate(["/users-api/"]);

  }
}
